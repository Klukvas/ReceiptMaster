version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: market_postgres
    environment:
      POSTGRES_DB: market_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks: [market_network]
    restart: unless-stopped

  api:
    image: ghcr.io/klukvas/receiptmaster/backend:latest
    container_name: market_api
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: market_db
      API_PREFIX: api/v1
      RECEIPT_STORAGE_PATH: /app/receipts
      RECEIPT_BASE_URL: http://${DOMAIN}   # или http://<IP>, см. .env ниже
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./receipts:/app/receipts
    depends_on: [postgres]
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 15s
      timeout: 3s
      retries: 5
    networks: [market_network]
    restart: unless-stopped

  frontend:
    image: ghcr.io/klukvas/receiptmaster/frontend:latest
    container_name: market_frontend
    expose:
      - "80"
    depends_on: [api]
    networks: [market_network]
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: market_nginx
    depends_on: [api, frontend]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks: [market_network]
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  market_network:
    driver: bridge